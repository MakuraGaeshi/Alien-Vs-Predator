using RRYautja;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using Verse;
using Verse.AI;
using Verse.Sound;

namespace RimWorld
{
	// Token: 0x020006C1 RID: 1729
	public class Building_XenomorphCocoon : Building, IAssignableBuilding
	{
		// Token: 0x17000580 RID: 1408
		// (get) Token: 0x060024C5 RID: 9413 RVA: 0x0011808A File Offset: 0x0011648A
		// (set) Token: 0x060024C6 RID: 9414 RVA: 0x00118094 File Offset: 0x00116494
		public bool ForPrisoners
		{
			get
			{
				return this.forPrisonersInt;
			}
			set
			{
				if (value == this.forPrisonersInt || !this.def.building.bed_humanlike)
				{
					return;
				}
				if (Current.ProgramState != ProgramState.Playing && Scribe.mode != LoadSaveMode.Inactive)
				{
					Log.Error("Tried to set ForPrisoners while game mode was " + Current.ProgramState, false);
					return;
				}
				this.RemoveAllOwners();
				this.forPrisonersInt = value;
				this.Notify_ColorChanged();
				this.NotifyRoomBedTypeChanged();
			}
		}

		// Token: 0x17000581 RID: 1409
		// (get) Token: 0x060024C7 RID: 9415 RVA: 0x0011810C File Offset: 0x0011650C
		// (set) Token: 0x060024C8 RID: 9416 RVA: 0x00118114 File Offset: 0x00116514
		public bool Medical
		{
			get
			{
				return this.medicalInt;
			}
			set
			{
				if (value == this.medicalInt || !this.def.building.bed_humanlike)
				{
					return;
				}
				this.RemoveAllOwners();
				this.medicalInt = value;
				this.Notify_ColorChanged();
				if (base.Spawned)
				{
					base.Map.mapDrawer.MapMeshDirty(base.Position, MapMeshFlag.Things);
					this.NotifyRoomBedTypeChanged();
				}
				this.FacilityChanged();
			}
		}

		// Token: 0x17000582 RID: 1410
		// (get) Token: 0x060024C9 RID: 9417 RVA: 0x00118184 File Offset: 0x00116584
		public bool AnyUnownedSleepingSlot
		{
			get
			{
				if (this.Medical)
				{
					Log.Warning("Tried to check for unowned sleeping slot on medical bed " + this, false);
					return false;
				}
				return this.owners.Count < this.SleepingSlotsCount;
			}
		}

		// Token: 0x17000583 RID: 1411
		// (get) Token: 0x060024CA RID: 9418 RVA: 0x001181B8 File Offset: 0x001165B8
		public bool AnyUnoccupiedSleepingSlot
		{
			get
			{
				for (int i = 0; i < this.SleepingSlotsCount; i++)
				{
					if (this.GetCurOccupant(i) == null)
					{
						return true;
					}
				}
				return false;
			}
		}

		// Token: 0x17000584 RID: 1412
		// (get) Token: 0x060024CB RID: 9419 RVA: 0x001181EC File Offset: 0x001165EC
		public IEnumerable<Pawn> CurOccupants
		{
			get
			{
				for (int i = 0; i < this.SleepingSlotsCount; i++)
				{
					Pawn occupant = this.GetCurOccupant(i);
					if (occupant != null)
					{
						yield return occupant;
					}
				}
				yield break;
			}
		}

		// Token: 0x17000585 RID: 1413
		// (get) Token: 0x060024CC RID: 9420 RVA: 0x0011820F File Offset: 0x0011660F
		public override Color DrawColor
		{
			get
			{
				if (this.def.MadeFromStuff)
				{
					return base.DrawColor;
				}
				return this.DrawColorTwo;
			}
		}

		// Token: 0x17000586 RID: 1414
		// (get) Token: 0x060024CD RID: 9421 RVA: 0x00118230 File Offset: 0x00116630
		public override Color DrawColorTwo
		{
			get
			{
				if (!this.def.building.bed_humanlike)
				{
					return base.DrawColorTwo;
				}
				bool forPrisoners = this.ForPrisoners;
				bool medical = this.Medical;
				if (forPrisoners && medical)
				{
					return Building_XenomorphCocoon.SheetColorMedicalForPrisoner;
				}
				if (forPrisoners)
				{
					return Building_XenomorphCocoon.SheetColorForPrisoner;
				}
				if (medical)
				{
					return Building_XenomorphCocoon.SheetColorMedical;
				}
				if (this.def == ThingDefOf.RoyalBed)
				{
					return Building_XenomorphCocoon.SheetColorRoyal;
				}
				return Building_XenomorphCocoon.SheetColorNormal;
			}
		}

		// Token: 0x17000587 RID: 1415
		// (get) Token: 0x060024CE RID: 9422 RVA: 0x001182AC File Offset: 0x001166AC
		public int SleepingSlotsCount
		{
			get
			{
				return XenomorphCocoonUtility.GetSleepingSlotsCount(this.def.size);
			}
		}

		// Token: 0x17000588 RID: 1416
		// (get) Token: 0x060024CF RID: 9423 RVA: 0x001182BE File Offset: 0x001166BE
		public IEnumerable<Pawn> AssigningCandidates
		{
			get
			{
				if (!base.Spawned)
				{
					return Enumerable.Empty<Pawn>();
				}
				return base.Map.mapPawns.FreeColonists;
			}
		}

		// Token: 0x17000589 RID: 1417
		// (get) Token: 0x060024D0 RID: 9424 RVA: 0x001182E1 File Offset: 0x001166E1
		public IEnumerable<Pawn> AssignedPawns
		{
			get
			{
				return this.owners;
			}
		}

		// Token: 0x1700058A RID: 1418
		// (get) Token: 0x060024D1 RID: 9425 RVA: 0x001182E9 File Offset: 0x001166E9
		public int MaxAssignedPawnsCount
		{
			get
			{
				return this.SleepingSlotsCount;
			}
		}

		// Token: 0x1700058B RID: 1419
		// (get) Token: 0x060024D2 RID: 9426 RVA: 0x001182F4 File Offset: 0x001166F4
		private bool PlayerCanSeeOwners
		{
			get
			{
				if (base.Faction == Faction.OfPlayer)
				{
					return true;
				}
				for (int i = 0; i < this.owners.Count; i++)
				{
					if (this.owners[i].Faction == Faction.OfPlayer || this.owners[i].HostFaction == Faction.OfPlayer)
					{
						return true;
					}
				}
				return false;
			}
		}

		// Token: 0x060024D3 RID: 9427 RVA: 0x00118368 File Offset: 0x00116768
		public void TryAssignPawn(Pawn owner)
		{

			owner.ownership.ClaimBedIfNonMedical(this);
		}

		// Token: 0x060024D4 RID: 9428 RVA: 0x00118376 File Offset: 0x00116776
		public void TryUnassignPawn(Pawn pawn)
		{
			if (this.owners.Contains(pawn))
			{
				pawn.ownership.UnclaimBed();
			}
		}

		// Token: 0x060024D5 RID: 9429 RVA: 0x00118394 File Offset: 0x00116794
		public bool AssignedAnything(Pawn pawn)
		{
			return pawn.ownership.OwnedBed != null;
		}

		// Token: 0x060024D6 RID: 9430 RVA: 0x001183A8 File Offset: 0x001167A8
		public override void SpawnSetup(Map map, bool respawningAfterLoad)
		{
			base.SpawnSetup(map, respawningAfterLoad);
			Region validRegionAt_NoRebuild = map.regionGrid.GetValidRegionAt_NoRebuild(base.Position);
			if (validRegionAt_NoRebuild != null && validRegionAt_NoRebuild.Room.isPrisonCell)
			{
				this.ForPrisoners = true;
			}
			if (!this.alreadySetDefaultMed)
			{
				this.alreadySetDefaultMed = true;
				if (this.def.building.bed_defaultMedical)
				{
					this.Medical = true;
				}
			}
		}

		// Token: 0x060024D7 RID: 9431 RVA: 0x0011841C File Offset: 0x0011681C
		public override void DeSpawn(DestroyMode mode = DestroyMode.Vanish)
		{
			this.RemoveAllOwners();
			this.ForPrisoners = false;
			this.Medical = false;
			this.alreadySetDefaultMed = false;
			Room room = this.GetRoom(RegionType.Set_Passable);
			base.DeSpawn(mode);
			if (room != null)
			{
				room.Notify_RoomShapeOrContainedBedsChanged();
			}
		}

		// Token: 0x060024D8 RID: 9432 RVA: 0x0011845F File Offset: 0x0011685F
		public override void ExposeData()
		{
			base.ExposeData();
			Scribe_Values.Look<bool>(ref this.forPrisonersInt, "forPrisoners", false, false);
			Scribe_Values.Look<bool>(ref this.medicalInt, "medical", false, false);
			Scribe_Values.Look<bool>(ref this.alreadySetDefaultMed, "alreadySetDefaultMed", false, false);
		}

		// Token: 0x060024D9 RID: 9433 RVA: 0x001184A0 File Offset: 0x001168A0
		public override void DrawExtraSelectionOverlays()
		{
			base.DrawExtraSelectionOverlays();
			Room room = this.GetRoom(RegionType.Set_Passable);
			if (room != null && Building_XenomorphCocoon.RoomCanBePrisonCell(room))
			{
				room.DrawFieldEdges();
			}
		}

		// Token: 0x060024DA RID: 9434 RVA: 0x001184D2 File Offset: 0x001168D2
		public static bool RoomCanBePrisonCell(Room r)
		{
			return !r.TouchesMapEdge && !r.IsHuge && r.RegionType == RegionType.Normal;
		}

		// Token: 0x060024DB RID: 9435 RVA: 0x001184F8 File Offset: 0x001168F8
		public override IEnumerable<Gizmo> GetGizmos()
		{
			foreach (Gizmo g in base.GetGizmos())
			{
				yield return g;
			}
			if (this.def.building.bed_humanlike && base.Faction == Faction.OfPlayer)
			{
				if (!this.ForPrisoners && !this.Medical)
				{
					yield return new Command_Action
					{
						defaultLabel = "CommandBedSetOwnerLabel".Translate(),
						icon = ContentFinder<Texture2D>.Get("UI/Commands/AssignOwner", true),
						defaultDesc = "CommandBedSetOwnerDesc".Translate(),
						action = delegate()
						{
							Find.WindowStack.Add(new Dialog_AssignBuildingOwner(this));
						},
						hotKey = KeyBindingDefOf.Misc3
					};
				}
			}
			yield break;
		}

		// Token: 0x060024DC RID: 9436 RVA: 0x0011851C File Offset: 0x0011691C
		private void ToggleForPrisonersByInterface()
		{
			if (Building_XenomorphCocoon.lastPrisonerSetChangeFrame == Time.frameCount)
			{
				return;
			}
            Building_XenomorphCocoon.lastPrisonerSetChangeFrame = Time.frameCount;
			bool newForPrisoners = !this.ForPrisoners;
			SoundDef soundDef = (!newForPrisoners) ? SoundDefOf.Checkbox_TurnedOff : SoundDefOf.Checkbox_TurnedOn;
			soundDef.PlayOneShotOnCamera(null);
			List<Building_XenomorphCocoon> bedsToAffect = new List<Building_XenomorphCocoon>();
			foreach (Building_XenomorphCocoon building_Bed in Find.Selector.SelectedObjects.OfType<Building_XenomorphCocoon>())
			{
				if (building_Bed.ForPrisoners != newForPrisoners)
				{
					Room room = building_Bed.GetRoom(RegionType.Set_Passable);
					if (room == null || !Building_XenomorphCocoon.RoomCanBePrisonCell(room))
					{
						if (!bedsToAffect.Contains(building_Bed))
						{
							bedsToAffect.Add(building_Bed);
						}
					}
					else
					{
						foreach (Building_XenomorphCocoon item in room.ContainedBeds)
						{
							if (!bedsToAffect.Contains(item))
							{
								bedsToAffect.Add(item);
							}
						}
					}
				}
			}
			Action action = delegate()
			{
				List<Room> list = new List<Room>();
				foreach (Building_XenomorphCocoon building_Bed3 in bedsToAffect)
				{
					Room room2 = building_Bed3.GetRoom(RegionType.Set_Passable);
					building_Bed3.ForPrisoners = (newForPrisoners && !room2.TouchesMapEdge);
					for (int j = 0; j < this.SleepingSlotsCount; j++)
					{
						Pawn curOccupant = this.GetCurOccupant(j);
						if (curOccupant != null)
						{
							curOccupant.jobs.EndCurrentJob(JobCondition.InterruptForced, true);
						}
					}
					if (!list.Contains(room2) && !room2.TouchesMapEdge)
					{
						list.Add(room2);
					}
				}
				foreach (Room room3 in list)
				{
					room3.Notify_RoomShapeOrContainedBedsChanged();
				}
			};
			if ((from b in bedsToAffect
			where b.owners.Any<Pawn>() && b != this
			select b).Count<Building_XenomorphCocoon>() == 0)
			{
				action();
			}
			else
			{
				StringBuilder stringBuilder = new StringBuilder();
				if (newForPrisoners)
				{
					stringBuilder.Append("TurningOnPrisonerBedWarning".Translate());
				}
				else
				{
					stringBuilder.Append("TurningOffPrisonerBedWarning".Translate());
				}
				stringBuilder.AppendLine();
				foreach (Building_XenomorphCocoon building_Bed2 in bedsToAffect)
				{
					if ((newForPrisoners && !building_Bed2.ForPrisoners) || (!newForPrisoners && building_Bed2.ForPrisoners))
					{
						for (int i = 0; i < building_Bed2.owners.Count; i++)
						{
							stringBuilder.AppendLine();
							stringBuilder.Append(building_Bed2.owners[i].LabelShort);
						}
					}
				}
				stringBuilder.AppendLine();
				stringBuilder.AppendLine();
				stringBuilder.Append("AreYouSure".Translate());
				Find.WindowStack.Add(Dialog_MessageBox.CreateConfirmation(stringBuilder.ToString(), action, false, null));
			}
		}

		// Token: 0x060024DD RID: 9437 RVA: 0x00118808 File Offset: 0x00116C08
		public override string GetInspectString()
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(base.GetInspectString());
			if (this.def.building.bed_humanlike)
			{
				stringBuilder.AppendLine();
				if (this.ForPrisoners)
				{
					stringBuilder.AppendLine("ForPrisonerUse".Translate());
				}
				else if (this.PlayerCanSeeOwners)
				{
					stringBuilder.AppendLine("ForColonistUse".Translate());
				}
				if (this.Medical)
				{
					stringBuilder.AppendLine("MedicalBed".Translate());
					if (base.Spawned)
					{
						stringBuilder.AppendLine("RoomInfectionChanceFactor".Translate() + ": " + this.GetRoom(RegionType.Set_Passable).GetStat(RoomStatDefOf.InfectionChanceFactor).ToStringPercent());
					}
				}
				else if (this.PlayerCanSeeOwners)
				{
					if (this.owners.Count == 0)
					{
						stringBuilder.AppendLine("Owner".Translate() + ": " + "Nobody".Translate());
					}
					else if (this.owners.Count == 1)
					{
						stringBuilder.AppendLine("Owner".Translate() + ": " + this.owners[0].Label);
					}
					else
					{
						stringBuilder.Append("Owners".Translate() + ": ");
						bool flag = false;
						for (int i = 0; i < this.owners.Count; i++)
						{
							if (flag)
							{
								stringBuilder.Append(", ");
							}
							flag = true;
							stringBuilder.Append(this.owners[i].LabelShort);
						}
						stringBuilder.AppendLine();
					}
				}
			}
			return stringBuilder.ToString().TrimEndNewlines();
		}

		// Token: 0x060024DE RID: 9438 RVA: 0x001189DC File Offset: 0x00116DDC
		public override IEnumerable<FloatMenuOption> GetFloatMenuOptions(Pawn myPawn)
		{
			if (myPawn.RaceProps.Humanlike && !this.ForPrisoners && this.Medical && !myPawn.Drafted && base.Faction == Faction.OfPlayer && RestUtility.CanUseBedEver(myPawn, this.def))
			{
				if (!HealthAIUtility.ShouldSeekMedicalRest(myPawn) && !HealthAIUtility.ShouldSeekMedicalRestUrgent(myPawn))
				{
					yield return new FloatMenuOption("UseMedicalBed".Translate() + " (" + "NotInjured".Translate() + ")", null, MenuOptionPriority.Default, null, null, 0f, null, null);
				}
				else
				{
					Action sleep = delegate()
					{
						if (!this.ForPrisoners && this.Medical && myPawn.CanReserveAndReach(this, PathEndMode.ClosestTouch, Danger.Deadly, this.SleepingSlotsCount, -1, null, true))
						{
							if (myPawn.CurJobDef == JobDefOf.LayDown && myPawn.CurJob.GetTarget(TargetIndex.A).Thing == this)
							{
								myPawn.CurJob.restUntilHealed = true;
							}
							else
							{
								Job job = new Job(JobDefOf.LayDown, this);
								job.restUntilHealed = true;
								myPawn.jobs.TryTakeOrderedJob(job, JobTag.Misc);
							}
							myPawn.mindState.ResetLastDisturbanceTick();
						}
					};
					yield return FloatMenuUtility.DecoratePrioritizedTask(new FloatMenuOption("UseMedicalBed".Translate(), sleep, MenuOptionPriority.Default, null, null, 0f, null, null), myPawn, this, (!this.AnyUnoccupiedSleepingSlot) ? "SomeoneElseSleeping" : "ReservedBy");
				}
			}
			yield break;
		}

		// Token: 0x060024DF RID: 9439 RVA: 0x00118A08 File Offset: 0x00116E08
		public override void DrawGUIOverlay()
		{
			if (this.Medical)
			{
				return;
			}
			if (Find.CameraDriver.CurrentZoom == CameraZoomRange.Closest && this.PlayerCanSeeOwners)
			{
				Color defaultThingLabelColor = GenMapUI.DefaultThingLabelColor;
				if (!this.owners.Any<Pawn>())
				{
					GenMapUI.DrawThingLabel(this, "Unowned".Translate(), defaultThingLabelColor);
				}
				else if (this.owners.Count == 1)
				{
					if (this.owners[0].InBed() && this.owners[0].CurrentBed() == this)
					{
						return;
					}
					GenMapUI.DrawThingLabel(this, this.owners[0].LabelShort, defaultThingLabelColor);
				}
				else
				{
					for (int i = 0; i < this.owners.Count; i++)
					{
						if (!this.owners[i].InBed() || this.owners[i].CurrentBed() != this || !(this.owners[i].Position == this.GetSleepingSlotPos(i)))
						{
							Vector3 multiOwnersLabelScreenPosFor = this.GetMultiOwnersLabelScreenPosFor(i);
							GenMapUI.DrawThingLabel(multiOwnersLabelScreenPosFor, this.owners[i].LabelShort, defaultThingLabelColor);
						}
					}
				}
			}
		}

		// Token: 0x060024E0 RID: 9440 RVA: 0x00118B58 File Offset: 0x00116F58
		public Pawn GetCurOccupant(int slotIndex)
		{
			if (!base.Spawned)
			{
				return null;
			}
			IntVec3 sleepingSlotPos = this.GetSleepingSlotPos(slotIndex);
			List<Thing> list = base.Map.thingGrid.ThingsListAt(sleepingSlotPos);
			for (int i = 0; i < list.Count; i++)
			{
				Pawn pawn = list[i] as Pawn;
				if (pawn != null)
				{
					if (pawn.CurJob != null)
					{
						if (pawn.GetPosture() == PawnPosture.LayingInBed)
						{
							return pawn;
						}
					}
				}
			}
			return null;
		}

		// Token: 0x060024E1 RID: 9441 RVA: 0x00118BD8 File Offset: 0x00116FD8
		public int GetCurOccupantSlotIndex(Pawn curOccupant)
		{
			for (int i = 0; i < this.SleepingSlotsCount; i++)
			{
				if (this.GetCurOccupant(i) == curOccupant)
				{
					return i;
				}
			}
			Log.Error("Could not find pawn " + curOccupant + " on any of sleeping slots.", false);
			return 0;
		}

		// Token: 0x060024E2 RID: 9442 RVA: 0x00118C24 File Offset: 0x00117024
		public Pawn GetCurOccupantAt(IntVec3 pos)
		{
			for (int i = 0; i < this.SleepingSlotsCount; i++)
			{
				if (this.GetSleepingSlotPos(i) == pos)
				{
					return this.GetCurOccupant(i);
				}
			}
			return null;
		}

		// Token: 0x060024E3 RID: 9443 RVA: 0x00118C63 File Offset: 0x00117063
		public IntVec3 GetSleepingSlotPos(int index)
		{
			return BedUtility.GetSleepingSlotPos(index, base.Position, base.Rotation, this.def.size);
		}

		// Token: 0x060024E4 RID: 9444 RVA: 0x00118C82 File Offset: 0x00117082
		public void SortOwners()
		{
			this.owners.SortBy((Pawn x) => x.thingIDNumber);
		}

		// Token: 0x060024E5 RID: 9445 RVA: 0x00118CAC File Offset: 0x001170AC
		private void RemoveAllOwners()
		{
			for (int i = this.owners.Count - 1; i >= 0; i--)
			{
				this.owners[i].ownership.UnclaimBed();
			}
		}

		// Token: 0x060024E6 RID: 9446 RVA: 0x00118CF0 File Offset: 0x001170F0
		private void NotifyRoomBedTypeChanged()
		{
			Room room = this.GetRoom(RegionType.Set_Passable);
			if (room != null)
			{
				room.Notify_BedTypeChanged();
			}
		}

		// Token: 0x060024E7 RID: 9447 RVA: 0x00118D14 File Offset: 0x00117114
		private void FacilityChanged()
		{
			CompFacility compFacility = this.TryGetComp<CompFacility>();
			CompAffectedByFacilities compAffectedByFacilities = this.TryGetComp<CompAffectedByFacilities>();
			if (compFacility != null)
			{
				compFacility.Notify_ThingChanged();
			}
			if (compAffectedByFacilities != null)
			{
				compAffectedByFacilities.Notify_ThingChanged();
			}
		}

		// Token: 0x060024E8 RID: 9448 RVA: 0x00118D48 File Offset: 0x00117148
		private Vector3 GetMultiOwnersLabelScreenPosFor(int slotIndex)
		{
			IntVec3 sleepingSlotPos = this.GetSleepingSlotPos(slotIndex);
			Vector3 drawPos = this.DrawPos;
			if (base.Rotation.IsHorizontal)
			{
				drawPos.z = (float)sleepingSlotPos.z + 0.6f;
			}
			else
			{
				drawPos.x = (float)sleepingSlotPos.x + 0.5f;
				drawPos.z += -0.4f;
			}
			Vector2 v = drawPos.MapToUIPosition();
			if (!base.Rotation.IsHorizontal && this.SleepingSlotsCount == 2)
			{
				v = this.AdjustOwnerLabelPosToAvoidOverlapping(v, slotIndex);
			}
			return v;
		}

		// Token: 0x060024E9 RID: 9449 RVA: 0x00118DFC File Offset: 0x001171FC
		private Vector3 AdjustOwnerLabelPosToAvoidOverlapping(Vector3 screenPos, int slotIndex)
		{
			Text.Font = GameFont.Tiny;
			float num = Text.CalcSize(this.owners[slotIndex].LabelShort).x + 1f;
			Vector2 vector = this.DrawPos.MapToUIPosition();
			float num2 = Mathf.Abs(screenPos.x - vector.x);
			IntVec3 sleepingSlotPos = this.GetSleepingSlotPos(slotIndex);
			if (num > num2 * 2f)
			{
				float num3;
				if (slotIndex == 0)
				{
					num3 = (float)this.GetSleepingSlotPos(1).x;
				}
				else
				{
					num3 = (float)this.GetSleepingSlotPos(0).x;
				}
				if ((float)sleepingSlotPos.x < num3)
				{
					screenPos.x -= (num - num2 * 2f) / 2f;
				}
				else
				{
					screenPos.x += (num - num2 * 2f) / 2f;
				}
			}
			return screenPos;
		}

		// Token: 0x040014CA RID: 5322
		private bool forPrisonersInt;

		// Token: 0x040014CB RID: 5323
		private bool medicalInt;

		// Token: 0x040014CC RID: 5324
		private bool alreadySetDefaultMed;

		// Token: 0x040014CD RID: 5325
		public List<Pawn> owners = new List<Pawn>();

		// Token: 0x040014CE RID: 5326
		private static int lastPrisonerSetChangeFrame = -1;

		// Token: 0x040014CF RID: 5327
		private static readonly Color SheetColorNormal = new Color(0.6313726f, 0.8352941f, 0.7058824f);

		// Token: 0x040014D0 RID: 5328
		private static readonly Color SheetColorRoyal = new Color(0.670588255f, 0.9137255f, 0.745098054f);

		// Token: 0x040014D1 RID: 5329
		public static readonly Color SheetColorForPrisoner = new Color(1f, 0.7176471f, 0.129411772f);

		// Token: 0x040014D2 RID: 5330
		private static readonly Color SheetColorMedical = new Color(0.3882353f, 0.623529434f, 0.8862745f);

		// Token: 0x040014D3 RID: 5331
		private static readonly Color SheetColorMedicalForPrisoner = new Color(0.654902f, 0.3764706f, 0.152941182f);
	}
}
